{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36ma\u001b[0m: scala.Array[Int] = \u001b[33mArray\u001b[0m(\u001b[32m2\u001b[0m, \u001b[32m3\u001b[0m, \u001b[32m5\u001b[0m, \u001b[32m7\u001b[0m, \u001b[32m11\u001b[0m)\n",
       "\u001b[36mresult\u001b[0m: scala.Array[Int] = \u001b[33mArray\u001b[0m(\u001b[32m4\u001b[0m, \u001b[32m6\u001b[0m, \u001b[32m10\u001b[0m, \u001b[32m14\u001b[0m, \u001b[32m22\u001b[0m)\n",
       "\u001b[36mres2_2\u001b[0m: scala.Array[Int] = \u001b[33mArray\u001b[0m(\u001b[32m20000000\u001b[0m)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "val a = Array(2 , 3, 5, 7, 11)\n",
    "//产生新的数组\n",
    "var result = for (elem <- a ) yield 2 * elem\n",
    "a.filter (_ % 2 == 0).map(10000000 * _ )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "常用方法"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[32mimport \u001b[36mscala.collection.mutable.ArrayBuffer\u001b[0m\n",
       "\u001b[36mres10_1\u001b[0m: Int = \u001b[32m19\u001b[0m\n",
       "\u001b[36mres10_2\u001b[0m: java.lang.String = \u001b[32m\"littleaa\"\u001b[0m"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import scala.collection.mutable.ArrayBuffer\n",
    "//求和\n",
    "Array(1,7,2,9).sum\n",
    "//最大排序\n",
    "ArrayBuffer(\"Mary\",\"had\",\"littleaa\",\"little\",\"lamb\").max\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[36mb\u001b[0m: scala.collection.mutable.ArrayBuffer[Int] = \u001b[33mArrayBuffer\u001b[0m(\u001b[32m1\u001b[0m, \u001b[32m7\u001b[0m, \u001b[32m2\u001b[0m, \u001b[32m9\u001b[0m)\n",
       "\u001b[36mbSorted\u001b[0m: scala.collection.mutable.ArrayBuffer[Int] = \u001b[33mArrayBuffer\u001b[0m(\u001b[32m1\u001b[0m, \u001b[32m2\u001b[0m, \u001b[32m7\u001b[0m, \u001b[32m9\u001b[0m)\n",
       "\u001b[36ma1\u001b[0m: scala.Array[Int] = \u001b[33mArray\u001b[0m(\u001b[32m1\u001b[0m, \u001b[32m2\u001b[0m, \u001b[32m7\u001b[0m, \u001b[32m9\u001b[0m)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "val b = ArrayBuffer(1, 7, 2, 9)\n",
    "//排序\n",
    "val bSorted = b.sorted\n",
    "\n",
    "val a1 = Array(1, 7, 2, 9)\n",
    "scala.util.Sorting.quickSort(a1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Scala 2.10",
   "language": "scala210",
   "name": "scala210"
  },
  "language_info": {
   "codemirror_mode": "text/x-scala",
   "file_extension": "scala",
   "mimetype": "text/x-scala",
   "name": "scala210",
   "pygments_lexer": "scala",
   "version": "2.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
